[General]
network=playground.SingleCell_D2D
image-path=../../images
tkenv-plugin-path = ../../../inet/etc/plugins
output-scalar-file-append = false
debug-on-errors = false
tkenv-default-config = 
sim-time-limit=10s
warmup-period=0s
repeat = 3
**.routingRecorder.enabled = false

# Statistics.
output-scalar-file = ${resultdir}/${configname}/${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${repetition}.vec
seed-set = ${repetition}
**.vector-recording = true

# Channel.
**.channelControl.pMax = 10W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2100e+6Hz

# Phyiscal layer.
**.nic.phy.channelModel=xmldoc("config_channel.xml")
**.feedbackComputation = xmldoc("config_channel.xml")

# Mobility.
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m

# UEs attached to eNB.
**.fbDelay = 1

# AMC Module.
**.rbAllocationType = "localized"
**.deployer.numRbDl = 50
**.deployer.numRbUl = 50
**.numBands = 50


# eNodeB.
*.eNodeB.mobility.initFromDisplayString = false
*.eNodeB.mobility.initialX = 300m
*.eNodeB.mobility.initialY = 300m

# UEs.
*.ue*[0].macCellId = 1
*.ue*[0].masterId = 1
*.ue*[0].mobility.initFromDisplayString = false

# D2D endpoints are far from eNodeB (~50m) and close to each other (20m).
*.ueD2DTx[0].mobility.initialX = 290m
*.ueD2DTx[0].mobility.initialY = 350m
*.ueD2DRx[0].mobility.initialX = 310m
*.ueD2DRx[0].mobility.initialY = 350m

# TCP.
**.tcpType = "TCP"
**.tcp.tcpAlgorithmClass = "TCPNewReno"
**.tcp.windowScalingSupport = true
**.tcpApp[*].dataTransferMode = "object"
**.tcp.mss = 1460
**.tcp.advertisedWindow = 1460000

### UEs run TCP-based filetransfer going through cellular Tx->eNodeB->Rx (2 hops).
[Config Cellular]
*.numUeCell = 0
*.numUeD2DTx = 1
*.numUeD2DRx = 1

# Traffic between UEs (ueD2DTx[0] --> ueD2DRx[0])
# Transmitter
*.ueD2D*[0].numTcpApps = 1

*.ueD2DTx[0].tcpApp[0].typename = "TCPBasicClientApp"
*.ueD2DTx[0].tcpApp[0].requestLength = 750B
*.ueD2DTx[0].tcpApp[0].replyLength = exponential(250kB)
*.ueD2DTx[0].tcpApp[0].idleInterval = exponential(1s)
*.ueD2DTx[0].tcpApp[0].connectAddress = "ueD2DRx[0]"
*.ueD2DTx[0].tcpApp[0].connectPort = 1000
*.ueD2DTx[0].tcpApp[0].thinkTime = 0s

# Receiver
*.ueD2DRx[0].tcpApp[*].typename = "TCPGenericSrvApp"
*.ueD2DRx[0].tcpApp[*].localPort = 1000

**.tcpApp[*].tClose = -1s

# Disable D2D for the eNodeB and the UEs
*.eNodeB.d2dCapable = false
*.ueD2D*[0].d2dCapable = false
**.**.amcMode = "AUTO"


### UEs run TCP-based filetransfer going through direct Tx->Rx (1 hop).
[Config D2D]
extends=Cellular

# Enable D2D.
*.eNodeB.d2dCapable = true
*.ueD2D*[*].d2dCapable = true
**.amcMode = "D2D"

# --- Set the D2D peering capabilities ---#
#
# For each D2D-capable UE, write a list of UEs (separated by blank spaces)
# representing the possible peering UEs. Note that this relationship is unidirectional. So, it is
# necessary to set also the opposite relationship to allow the receiver to send TCP ACKs using D2D 
# i.e.: ueD2DTx[0] --> ueD2DRx[0]
#       ueD2DRx[0] --> ueD2DTx[0]
*.ueD2DTx[0].nic.d2dPeerAddresses = "ueD2DRx[0]"
*.ueD2DRx[0].nic.d2dPeerAddresses = "ueD2DTx[0]"

# --- Select CQI for D2D transmissions --- #
#
# To enable the reporting of CQIs for each D2D link, set the parameter *.eNodeB.nic.phy.enableD2DCqiReporting
# To use fixed CQI, set the parameter **.usePreconfiguredTxParams and select the desired CQI using the parameter **.d2dCqi
*.eNodeB.nic.phy.enableD2DCqiReporting = true
**.usePreconfiguredTxParams = false
**.d2dCqi = 7
